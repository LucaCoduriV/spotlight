// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.17.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments
)]

// Section: imports

use crate::api::core::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!();

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_StateApp_component_clickable_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        flutter_rust_bridge::RustOpaque<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StateApp>,
        >,
    >,
    id: impl CstDecode<usize>,
    action: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "StateApp_component_clickable",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_id = id.cst_decode();
            let api_action = action.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that = api_that.rust_auto_opaque_decode_async_ref_mut().await;
                        crate::api::core::StateApp::component_clickable(
                            &mut api_that,
                            api_id,
                            api_action,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_StateApp_execute_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        flutter_rust_bridge::RustOpaque<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StateApp>,
        >,
    >,
    id: impl CstDecode<usize>,
    arg: impl CstDecode<Option<String>>,
    on_executed: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "StateApp_execute",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_id = id.cst_decode();
            let api_arg = arg.cst_decode();
            let api_on_executed = decode_DartFn_Inputs__Output_unit(on_executed.cst_decode());
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that = api_that.rust_auto_opaque_decode_async_ref_mut().await;
                        crate::api::core::StateApp::execute(
                            &mut api_that,
                            api_id,
                            api_arg,
                            api_on_executed,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_StateApp_get_commands_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        flutter_rust_bridge::RustOpaque<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StateApp>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "StateApp_get_commands",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        crate::api::core::StateApp::get_commands(&api_that),
                    )
                })())
            }
        },
    )
}
fn wire_StateApp_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "StateApp_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::api::core::StateApp::new(),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_init_app_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || Result::<_, ()>::Ok(crate::api::core::init_app()))())
            }
        },
    )
}
fn wire_on_exit_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "on_exit",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || Result::<_, ()>::Ok(crate::api::core::on_exit()))())
            }
        },
    )
}
fn wire_search_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    obj: impl CstDecode<
        flutter_rust_bridge::RustOpaque<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StateApp>,
        >,
    >,
    search: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "search",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_obj = obj.cst_decode();
            let api_search = search.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_obj = api_obj.rust_auto_opaque_decode_sync_ref();
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        crate::api::core::search(&api_obj, api_search),
                    )
                })())
            }
        },
    )
}
fn wire_set_dart_action_stream_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_dart_action_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::core::set_dart_action_stream(StreamSink::new(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::core::DartAction>(),
                    ))
                })())
            }
        },
    )
}

// Section: related_funcs

fn decode_DartFn_Inputs__Output_unit(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn() -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque) -> () {
        let args = vec![];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <()>::sse_decode_single(message)
    }

    move || {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(dart_opaque.clone()))
    }
}

// Section: dart2rust

impl CstDecode<crate::api::core::DartAction> for i32 {
    fn cst_decode(self) -> crate::api::core::DartAction {
        match self {
            0 => crate::api::core::DartAction::Exit,
            _ => unreachable!("Invalid variant for DartAction: {}", self),
        }
    }
}
impl CstDecode<i32> for i32 {
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<u8> for u8 {
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode
    for flutter_rust_bridge::RustOpaque<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StateApp>,
    >
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for String {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::core::BlazyrComponent {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_child =
                    <Option<Box<crate::api::core::BlazyrComponent>>>::sse_decode(deserializer);
                return crate::api::core::BlazyrComponent::Container { child: var_child };
            }
            1 => {
                let mut var_children =
                    <Option<Vec<crate::api::core::BlazyrComponent>>>::sse_decode(deserializer);
                return crate::api::core::BlazyrComponent::Column {
                    children: var_children,
                };
            }
            2 => {
                let mut var_children =
                    <Option<Vec<crate::api::core::BlazyrComponent>>>::sse_decode(deserializer);
                return crate::api::core::BlazyrComponent::Row {
                    children: var_children,
                };
            }
            3 => {
                let mut var_child =
                    <Option<Box<crate::api::core::BlazyrComponent>>>::sse_decode(deserializer);
                let mut var_onClick = <Option<String>>::sse_decode(deserializer);
                return crate::api::core::BlazyrComponent::Clickable {
                    child: var_child,
                    on_click: var_onClick,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::core::BlazyrEntityActionResponse {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::core::BlazyrComponent>::sse_decode(deserializer);
                return crate::api::core::BlazyrEntityActionResponse::Ui(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::core::BlazyrEntityActionResponse::Text(var_field0);
            }
            2 => {
                return crate::api::core::BlazyrEntityActionResponse::None;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Box<crate::api::core::BlazyrComponent> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::core::BlazyrComponent>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode for crate::api::core::DartAction {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::core::DartAction::Exit,
            _ => unreachable!("Invalid variant for DartAction: {}", inner),
        };
    }
}

impl SseDecode for crate::api::core::Entity {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_index = <usize>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_alias = <Option<String>>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_icon = <Option<crate::api::core::Image>>::sse_decode(deserializer);
        let mut var_type = <String>::sse_decode(deserializer);
        return crate::api::core::Entity {
            index: var_index,
            name: var_name,
            alias: var_alias,
            description: var_description,
            icon: var_icon,
            r#type: var_type,
        };
    }
}

impl SseDecode for crate::api::core::EntityError {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::core::EntityError::Unknown(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::core::Image {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::core::Image::Data(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::core::Image::Path(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Vec<crate::api::core::BlazyrComponent> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::core::BlazyrComponent>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::core::Entity> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::core::Entity>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::core::Image> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::core::Image>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<crate::api::core::BlazyrComponent>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<crate::api::core::BlazyrComponent>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::core::BlazyrComponent>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::api::core::BlazyrComponent>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for u8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for bool {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for crate::api::core::BlazyrComponent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::core::BlazyrComponent::Container { child } => {
                [0.into_dart(), child.into_into_dart().into_dart()].into_dart()
            }
            crate::api::core::BlazyrComponent::Column { children } => {
                [1.into_dart(), children.into_into_dart().into_dart()].into_dart()
            }
            crate::api::core::BlazyrComponent::Row { children } => {
                [2.into_dart(), children.into_into_dart().into_dart()].into_dart()
            }
            crate::api::core::BlazyrComponent::Clickable { child, on_click } => [
                3.into_dart(),
                child.into_into_dart().into_dart(),
                on_click.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::core::BlazyrComponent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::core::BlazyrComponent>
    for crate::api::core::BlazyrComponent
{
    fn into_into_dart(self) -> crate::api::core::BlazyrComponent {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::core::BlazyrEntityActionResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::core::BlazyrEntityActionResponse::Ui(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::core::BlazyrEntityActionResponse::Text(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::core::BlazyrEntityActionResponse::None => [2.into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::core::BlazyrEntityActionResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::core::BlazyrEntityActionResponse>
    for crate::api::core::BlazyrEntityActionResponse
{
    fn into_into_dart(self) -> crate::api::core::BlazyrEntityActionResponse {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::core::DartAction {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Exit => 0.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::core::DartAction {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::core::DartAction>
    for crate::api::core::DartAction
{
    fn into_into_dart(self) -> crate::api::core::DartAction {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::core::Entity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.icon.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::core::Entity {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::core::Entity> for crate::api::core::Entity {
    fn into_into_dart(self) -> crate::api::core::Entity {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::core::EntityError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::core::EntityError::Unknown(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::core::EntityError {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::core::EntityError>
    for crate::api::core::EntityError
{
    fn into_into_dart(self) -> crate::api::core::EntityError {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::core::Image {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::core::Image::Data(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::core::Image::Path(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::core::Image {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::core::Image> for crate::api::core::Image {
    fn into_into_dart(self) -> crate::api::core::Image {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode
    for flutter_rust_bridge::RustOpaque<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StateApp>,
    >
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::core::BlazyrComponent {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::core::BlazyrComponent::Container { child } => {
                <i32>::sse_encode(0, serializer);
                <Option<Box<crate::api::core::BlazyrComponent>>>::sse_encode(child, serializer);
            }
            crate::api::core::BlazyrComponent::Column { children } => {
                <i32>::sse_encode(1, serializer);
                <Option<Vec<crate::api::core::BlazyrComponent>>>::sse_encode(children, serializer);
            }
            crate::api::core::BlazyrComponent::Row { children } => {
                <i32>::sse_encode(2, serializer);
                <Option<Vec<crate::api::core::BlazyrComponent>>>::sse_encode(children, serializer);
            }
            crate::api::core::BlazyrComponent::Clickable { child, on_click } => {
                <i32>::sse_encode(3, serializer);
                <Option<Box<crate::api::core::BlazyrComponent>>>::sse_encode(child, serializer);
                <Option<String>>::sse_encode(on_click, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::core::BlazyrEntityActionResponse {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::core::BlazyrEntityActionResponse::Ui(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::core::BlazyrComponent>::sse_encode(field0, serializer);
            }
            crate::api::core::BlazyrEntityActionResponse::Text(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::core::BlazyrEntityActionResponse::None => {
                <i32>::sse_encode(2, serializer);
            }
        }
    }
}

impl SseEncode for Box<crate::api::core::BlazyrComponent> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::core::BlazyrComponent>::sse_encode(*self, serializer);
    }
}

impl SseEncode for crate::api::core::DartAction {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::api::core::Entity {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.index, serializer);
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.alias, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Option<crate::api::core::Image>>::sse_encode(self.icon, serializer);
        <String>::sse_encode(self.r#type, serializer);
    }
}

impl SseEncode for crate::api::core::EntityError {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::core::EntityError::Unknown(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::core::Image {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::core::Image::Data(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::core::Image::Path(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for Vec<crate::api::core::BlazyrComponent> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::core::BlazyrComponent>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::core::Entity> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::core::Entity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::core::Image> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::core::Image>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<crate::api::core::BlazyrComponent>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::core::BlazyrComponent>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::core::BlazyrComponent>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::core::BlazyrComponent>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for u8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for bool {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
